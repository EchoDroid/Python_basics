""" Создайте собственный класс-исключение, который должен проверять содержимое списка на
наличие только чисел. Проверить работу исключения на реальном примере. Необходимо
запрашивать у пользователя данные и заполнять список только числами. Класс-исключение
должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока
пользователь сам не остановит работу скрипта, введя, например, команду “stop”. При этом
скрипт завершается, сформированный список с числами выводится на экран.
Подсказка: для данного задания примем, что пользователь может вводить только числа и
строки. При вводе пользователем очередного элемента необходимо реализовать проверку
типа элемента и вносить его в список, только если введено число. Класс-исключение должен
не позволить пользователю ввести текст (не число) и отобразить соответствующее
сообщение. При этом работа скрипта не должна завершаться. """


class NonDigitExec(Exception):
    def __init__(self, msg):
        self.msg = msg

    def __str__(self):
        return self.msg


my_num_list = []
while True:
    tmp_str = input('Введите любое число\n')
    try:
        if not tmp_str.count('.') and tmp_str.isdigit():
            my_num_list.append(int(tmp_str))
        elif tmp_str.count('.') < 2 \
                and not len(tmp_str[:tmp_str.find('.')]) or tmp_str[:tmp_str.find('.')].isdigit() \
                and not len(tmp_str[tmp_str.find('.')+1:]) or tmp_str[tmp_str.find('.')+1:].isdigit():
            my_num_list.append(float(tmp_str))
        elif tmp_str.lower() == 'stop':
            break
        else:
            raise NonDigitExec(f'Ошибка преобразования! Строка {tmp_str} не является числом')
    except NonDigitExec as err:
        print(NonDigitExec)

print(my_num_list)
